services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: casmitter_postgres_staging
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - casmitter_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: casmitter_redis_staging
    restart: unless-stopped
    env_file:
      - .env
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - casmitter_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Rails Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.staging
    container_name: casmitter_app_staging
    restart: unless-stopped
    env_file:
      - .env
    environment:
      RAILS_ENV: staging
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      # Force production-like asset handling for staging
      RAILS_SERVE_STATIC_FILES: "true"
      RAILS_LOG_TO_STDOUT: "true"
      # Database configuration
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DB_NAME}
      DATABASE_USERNAME: ${DB_USER}
      DATABASE_PASSWORD: ${DB_PASSWORD}
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      # Rails configuration
      RAILS_MAX_THREADS: 5
      WEB_CONCURRENCY: 2
      # S3 Configuration
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_BUCKET: ${S3_BUCKET}
      S3_REGION: ${S3_REGION}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
    volumes:
      - ./storage:/rails/storage
      - ./log:/rails/log
      - ./tmp:/rails/tmp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - casmitter_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/up"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: casmitter_nginx_staging
    restart: unless-stopped

    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl.conf:/etc/nginx/ssl.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/webroot:/var/www/html
      - ./nginx/logs:/var/log/nginx
      - ./public:/var/www/html/public

    depends_on:
      app:
        condition: service_healthy
    networks:
      - casmitter_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://app:3000/up"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: casmitter_certbot_staging
    env_file:
      - staging.env
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/webroot:/var/www/html
    command: certonly --webroot --webroot-path=/var/www/html --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email --staging -d ${DOMAIN_NAME}
    networks:
      - casmitter_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  casmitter_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
